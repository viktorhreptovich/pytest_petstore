{"uid":"6a53a3a3f4a642ae","name":"Validation api updating pet","fullName":"tests.test_validation_pet_api.TestSpecificationPetApi#test_update_pet","historyId":"37752f4b65fd3345943a3754d0922997","time":{"start":1658247669207,"stop":1658247669895,"duration":688},"status":"failed","statusMessage":"AssertionError: [ResponseNotFound(http_status='200', responses=SpecPath('paths#/pet#put#responses'))]","statusTrace":"self = <tests.test_validation_pet_api.TestSpecificationPetApi object at 0x7f4d0f308520>\npet_api = <services.pet_api.PetApi object at 0x7f4d0f30b310>\n\n    @allure.title('Validation api updating pet')\n    def test_update_pet(self, pet_api):\n        pet = generate_pet()\n        pet_api.add_pet(pet)\n        pet['name'] = 'Vasiliy'\n    \n        result = pet_api.update_pet(pet)\n>       result.validate_specification_api()\n\ntests/test_validation_pet_api.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.request_result.RequestResult object at 0x7f4d0f30be50>\n\n    def validate_specification_api(self):\n        api = f'{self.response.request.method} {self.response.request.url}'\n        with allure.step(f'Validate specification: {api}'):\n            request = RequestsOpenAPIRequest(self.response.request)\n            response = RequestsOpenAPIResponse(self.response)\n            validator = ResponseValidator(spec)\n            result = validator.validate(request, response)\n            if len(result.errors) > 0:\n>               raise AssertionError(result.errors)\nE               AssertionError: [ResponseNotFound(http_status='200', responses=SpecPath('paths#/pet#put#responses'))]\n\nutils/request_result.py:61: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1658247669083,"stop":1658247669137,"duration":54},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"pet_api","time":{"start":1658247669137,"stop":1658247669137,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: [ResponseNotFound(http_status='200', responses=SpecPath('paths#/pet#put#responses'))]","statusTrace":"self = <tests.test_validation_pet_api.TestSpecificationPetApi object at 0x7f4d0f308520>\npet_api = <services.pet_api.PetApi object at 0x7f4d0f30b310>\n\n    @allure.title('Validation api updating pet')\n    def test_update_pet(self, pet_api):\n        pet = generate_pet()\n        pet_api.add_pet(pet)\n        pet['name'] = 'Vasiliy'\n    \n        result = pet_api.update_pet(pet)\n>       result.validate_specification_api()\n\ntests/test_validation_pet_api.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.request_result.RequestResult object at 0x7f4d0f30be50>\n\n    def validate_specification_api(self):\n        api = f'{self.response.request.method} {self.response.request.url}'\n        with allure.step(f'Validate specification: {api}'):\n            request = RequestsOpenAPIRequest(self.response.request)\n            response = RequestsOpenAPIResponse(self.response)\n            validator = ResponseValidator(spec)\n            result = validator.validate(request, response)\n            if len(result.errors) > 0:\n>               raise AssertionError(result.errors)\nE               AssertionError: [ResponseNotFound(http_status='200', responses=SpecPath('paths#/pet#put#responses'))]\n\nutils/request_result.py:61: AssertionError","steps":[{"name":"Send request create pet","time":{"start":1658247669209,"stop":1658247669553,"duration":344},"status":"passed","steps":[],"attachments":[{"uid":"a1f2966043c0cc8f","name":"Request","source":"a1f2966043c0cc8f.txt","type":"text/plain","size":442},{"uid":"7223076b8cb1232a","name":"Response","source":"7223076b8cb1232a.txt","type":"text/plain","size":558}],"parameters":[{"name":"body","value":"{'id': 23868, 'category': {'id': 4, 'name': 'Kikuyu'}, 'name': 'Joanna', 'photoUrls': ['https://www.owens-mckenzie.com/'], 'tags': [{'id': 6, 'name': 'SeaGreen'}], 'status': 'available'}"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Send request update pet","time":{"start":1658247669553,"stop":1658247669887,"duration":334},"status":"passed","steps":[],"attachments":[{"uid":"f44d22b18af96bcd","name":"Request","source":"f44d22b18af96bcd.txt","type":"text/plain","size":442},{"uid":"55bbe8d6fb4340e0","name":"Response","source":"55bbe8d6fb4340e0.txt","type":"text/plain","size":559}],"parameters":[{"name":"body","value":"{'id': 23868, 'category': {'id': 4, 'name': 'Kikuyu'}, 'name': 'Vasiliy', 'photoUrls': ['https://www.owens-mckenzie.com/'], 'tags': [{'id': 6, 'name': 'SeaGreen'}], 'status': 'available'}"}],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"Validate specification: PUT https://petstore.swagger.io/v2/pet","time":{"start":1658247669887,"stop":1658247669895,"duration":8},"status":"failed","statusMessage":"AssertionError: [ResponseNotFound(http_status='200', responses=SpecPath('paths#/pet#put#responses'))]\n","statusTrace":"  File \"/home/runner/work/pytest_petstore/pytest_petstore/utils/request_result.py\", line 61, in validate_specification_api\n    raise AssertionError(result.errors)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":3,"attachmentsCount":4,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"suite","value":"API petstore specification validations"},{"name":"parentSuite","value":"tests"},{"name":"subSuite","value":"TestSpecificationPetApi"},{"name":"host","value":"fv-az453-103"},{"name":"thread","value":"2607-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_validation_pet_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"62cd6f9235a7ab52","reportUrl":"https://viktorhreptovich.github.io/pytest_petstore/1//#testresult/62cd6f9235a7ab52","status":"failed","statusDetails":"AssertionError: [ResponseNotFound(http_status='200', responses=SpecPath('paths#/pet#put#responses'))]","time":{"start":1658247449693,"stop":1658247450244,"duration":551}}]},"tags":[]},"source":"6a53a3a3f4a642ae.json","parameterValues":[]}